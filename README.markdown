# Support Desk Application

## Overview

The **Support Desk** is a Java-based application developed at **Adventist University of Central Africa (AUCA)** to streamline support ticket management. It uses a client-server architecture with **Java RMI**, **Hibernate** for database operations, and **Swing** for a user-friendly GUI. The project employs the **MVC (Model-View-Controller)** and **DAO (Data Access Object)** design patterns for maintainability and structured data access. It supports **full CRUD operations** on both client and admin sides, **real-time notifications** from admin to users, and audit log export as PDF. Tables are autogenerated by Hibernate in a **PostgreSQL** database, with email notifications for OTP-based password resets.

Developed using **JDK 17** and **Maven**, the project emphasizes security (BCrypt password hashing), scalability (RMI), and usability.

## Features

- **User Authentication**:
  - Register with full name, username, email, and password.
  - Login with maintenance mode and blocked account checks.
  - Password reset via OTP sent to email (5-minute expiration).
- **Client-Side CRUD Operations**:
  - Create, read, update, and delete issues and comments.
  - Manage user profiles (edit profile, view details).
  - Search issues by keyword.
- **Admin-Side CRUD Operations**:
  - Manage users (block/unblock), notices, and reports.
  - Enable/disable maintenance mode.
  - View and export audit logs as PDF.
- **Real-Time Notifications**:
  - Admins send notices or updates to users instantly.
- **Audit Logging**:
  - Tracks actions (e.g., login, password reset) in the `audit_logs` table.
  - Exportable as PDF via `PdfGenerator`.
- **Technical Highlights**:
  - **MVC Pattern**: Models (`User`, `Issue`), Views (`LoginView`, `HomePageView`), Controllers (`UserController`, `IssueController`).
  - **DAO Pattern**: Data access via `UserDAO`, `IssueDAO`, etc.
  - **Java RMI**: Distributed client-server communication.
  - **Hibernate**: Autogenerates database tables.
  - **Swing GUI**: Responsive interface with views like `AdminDashboardView`.
  - **Email Integration**: OTPs via SMTP (e.g., Gmail).
  - **BCrypt**: Secure password hashing.
  - **PDF Generation**: Audit reports via `PdfGenerator`.

## Project Structure

```
Support_Desk/
├── .gitignore
├── pom.xml
├── README.markdown
├── reports.pdf
├── hibernate-demo/
│   ├── .gitignore
│   ├── pom.xml
│   ├── src/
│   │   ├── Assets/
│   │   │   ├── LogoSupportDesk.png
│   │   ├── com/supportdesk/server/
│   │   ├── Controller/
│   │   │   ├── AdminController.java
│   │   │   ├── IssueController.java
│   │   │   ├── NoticeController.java
│   │   │   ├── ReportController.java
│   │   │   ├── UserController.java
│   │   ├── model/
│   │   │   ├── AdminStats.java
│   │   │   ├── AuditLog.java
│   │   │   ├── Comment.java
│   │   │   ├── Issue.java
│   │   │   ├── Like.java
│   │   │   ├── Notice.java
│   │   │   ├── Notification.java
│   │   │   ├── Report.java
│   │   │   ├── SystemSettings.java
│   │   │   ├── User.java
│   │   ├── resources/
│   │   │   ├── hibernate.cfg.xml
│   │   ├── rmi/
│   │   │   ├── IssueService.java
│   │   │   ├── IssueServiceImpl.java
│   │   │   ├── NoticeService.java
│   │   │   ├── NoticeServiceImpl.java
│   │   │   ├── ReportService.java
│   │   │   ├── ReportServiceImpl.java
│   │   │   ├── RMIClient.java
│   │   │   ├── RMIServer.java
│   │   │   ├── UserService.java
│   │   │   ├── UserServiceImpl.java
│   │   ├── Services/
│   │   ├── util/
│   │   │   ├── EmailService.java
│   │   │   ├── HibernateUtil.java
│   │   │   ├── PasswordMigration.java
│   │   │   ├── PdfGenerator.java
│   │   ├── View/
│   │   │   ├── AdminDashboardView.java
│   │   │   ├── Alain12PasswordResetTest.java
│   │   │   ├── EditProfilePageView.java
│   │   │   ├── HomePageView.java
│   │   │   ├── IssueDetailView.java
│   │   │   ├── LoginView.java
│   │   │   ├── Main.java
│   │   │   ├── NoticesView.java
│   │   │   ├── PasswordCheckTest.java
│   │   │   ├── PasswordResetLoginTest.java
│   │   │   ├── PostIssueView.java
│   │   │   ├── ProfileView.java
│   │   │   ├── RegisterView.java
│   │   │   ├── SearchResultsView.java
│   │   │   ├── ViewApp.java
│   ├── target/
│   │   ├── hibernate-demo-1.0-SNAPSHOT.jar
│   │   ├── classes/
│   │   ├── maven-archiver/
│   │   ├── test-classes/
```

## Prerequisites

- **Java**: JDK 17
- **PostgreSQL**: Version 13 or later
- **Maven**: For dependency management
- **SMTP Server**: Gmail or other SMTP service
- **IDE**: Eclipse, IntelliJ IDEA, or similar
- **Dependencies** (in `pom.xml`):
  - Hibernate ORM 6.5.2
  - PostgreSQL JDBC Driver 42.7.3
  - jBCrypt 0.4
  - Jakarta Mail API 2.1.2
  - C3P0 0.9.5.5
  - iText 7 (for PDF generation)

## Setup Instructions

1. **Clone the Repository**:

   ```bash
   git clone https://github.com/Hir2wa/SupportDeskApp.git
   cd support-desk/hibernate-demo
   ```

2. **Configure PostgreSQL**:

   - Create a database:
     ```sql
     CREATE DATABASE support_desk;
     ```
   - Hibernate autogenerates tables (`users`, `issues`, `audit_logs`, etc.) via `model/` classes.

3. **Configure Hibernate**:

   - Edit `src/resources/hibernate.cfg.xml`:
     ```xml
     <property name="hibernate.connection.url">jdbc:postgresql://localhost:5432/support_desk</property>
     <property name="hibernate.connection.username">postgres</property>
     <property name="hibernate.connection.password">your_password</property>
     <property name="hibernate.hbm2ddl.auto">update</property>
     ```

4. **Configure Email Service**:

   - Update `util/EmailService.java` with SMTP settings:
     ```java
     props.put("mail.smtp.host", "smtp.gmail.com");
     props.put("mail.smtp.port", "587");
     props.put("mail.smtp.auth", "true");
     props.put("mail.smtp.starttls.enable", "true");
     ```
   - Use a Gmail App Password if 2FA is enabled.

5. **Install Dependencies**:

   ```bash
   mvn clean install
   ```

6. **Run the Server**:

   ```bash
   mvn exec:java -Dexec.mainClass="rmi.RMIServer"
   ```

   - Runs on `localhost:1099`, binding services (`UserService`, `IssueService`, etc.).

7. **Run the Client**:
   ```bash
   mvn exec:java -Dexec.mainClass="View.ViewApp"
   ```
   - Launches the Swing GUI.

## Usage

1. **Login**:

   - Enter username/password in `LoginView`.
   - Admins access `AdminDashboardView`; users access `HomePageView`.
   - Blocked users contact: +250 78 932 0006.

2. **Client Operations**:

   - Create/edit issues (`PostIssueView`, `IssueDetailView`).
   - Comment or like/dislike issues.
   - Update profile (`EditProfilePageView`).
   - Search issues (`SearchResultsView`).

3. **Admin Operations**:

   - Manage users, notices, reports (`AdminDashboardView`).
   - Toggle maintenance mode.
   - Export audit logs as PDF (`ReportController`, `PdfGenerator`).

4. **Real-Time Notifications**:
   - Users receive admin notices instantly (`NoticesView`, `Notification`).

## Database Schema

Tables autogenerated by Hibernate:

- **users**: `id`, `username`, `email`, `password`, `reset_otp`, `otp_created_at`, etc.
- **issues**: `id`, `title`, `description`, `user_id`, etc.
- **comments**: `id`, `issue_id`, `user_id`, `content`, etc.
- **notices**: `id`, `title`, `content`, `created_at`, etc.
- **audit_logs**: `id`, `user_id`, `action`, `timestamp`, etc.

Verify schema:

```sql
\d users
```

## Design Patterns

- **MVC**:
  - **Model**: `User`, `Issue`, `AuditLog`.
  - **View**: `LoginView`, `HomePageView`, `AdminDashboardView`.
  - **Controller**: `UserController`, `IssueController`, `ReportController`.
- **DAO**:
  - `UserDAO`, `IssueDAO`, `AuditLogDAO` for database access.

## Troubleshooting

- **Schema Errors**:
  - Ensure `hibernate.hbm2ddl.auto=update`.
  - Manually add columns if needed:
    ```sql
    ALTER TABLE users ADD COLUMN reset_otp VARCHAR(10);
    ALTER TABLE users ADD COLUMN otp_created_at TIMESTAMP;
    ```
- **Email Issues**:
  - Check `EmailService` logs and SMTP credentials.
- **RMI Errors**:
  - Verify `RMIServer` on `localhost:1099`.
  - Check firewall settings.
- **Login Fails**:
  - Check user data:
    ```sql
    SELECT * FROM users WHERE username = 'your_username';
    ```

## Future Improvements

- Enhance PDF reports with advanced formatting (iText 7).
- Implement WebSocket-based notifications for improved real-time updates.
- Upgrade UI to JavaFX for a modern look.
- Add multi-language support.

## Credits

Developed by **Alain Fabrice Hirwa** at **Adventist University of Central Africa (AUCA)**. Special thanks to AUCA faculty and peers for guidance and support.

## License

[MIT License](LICENSE)
